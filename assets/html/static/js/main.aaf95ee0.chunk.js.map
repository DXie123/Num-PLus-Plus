{"version":3,"sources":["models/expression.tsx","models/controller.tsx","components/MathBox.tsx","components/ResultBox.tsx","components/plot.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Mode","nerdamerAll","require","expStore","latex","dis2calc","forEach","v","k","replace","matrixList","this","replaceInput","split","slice","length","n","Math","sqrt","matrixExp","Array","from","keys","map","join","expression","evaluate","text","error","result","toTeX","calc2dis","search","Defint","Limit","Matrix","Var","Eval","solveFor","undefined","nerdamer","integrate","diff","observable","action","handleMatrix","convertFromLaTeX","computed","ExpContext","React","createContext","Map","RegExp","autorun","window","variable","postMessage","mode","valueOf","toString","Controller","mfController","setController","mf","focus","add","insert","format","backspace","executeCommand","clear","MathBox","exp","useContext","controller","virtualKeyboardMode","onContentDidChange","update","getValue","style","outline","fontSize","ref","mfe","SymMode","Plot","observer","fn","rootEl","useRef","options","target","width","height","yAxis","domain","grid","data","useEffect","functionPlot","Object","assign","current","e","ResultBox","EvalResultBox","SymResultBox","MatrixResultBox","evalResult","eval","textResult","InfoBox","content","invertMatrix","useState","setMode","doIntegrate","Int","doDiff","Diff","doPlot","prop","display","value","readOnly","hidden","hideAdd","marginLeft","onClick","substr","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaf95ee0.chunk.js","sourcesContent":["import { action, autorun, computed, observable } from \"mobx\";\r\nimport React from \"react\";\r\nimport nerdamer from 'nerdamer';\r\nconst nerdamerAll = require('nerdamer/all');\r\n\r\nexport enum Mode {\r\n  Eval = 0,\r\n  Var,\r\n  Defint,\r\n  Limit,\r\n  Matrix,\r\n};\r\n\r\nexport default class Expression {\r\n  @observable\r\n  private latex: string = '';\r\n\r\n  @observable\r\n  private expression: nerdamer.Expression | undefined = undefined;\r\n\r\n  @action\r\n  update = (latex: string) => {\r\n    try {\r\n      if (latex.length === 0) {\r\n        // empty input cause error in integrate & diff\r\n        this.latex = '';\r\n        this.expression = undefined;\r\n        return;\r\n      } else if (latex.search('matrix') >= 0) {\r\n        this.latex = this.handleMatrix(latex);\r\n      } else {\r\n        this.latex = this.replaceInput(latex);\r\n      }\r\n      this.expression = nerdamerAll.convertFromLaTeX(latex) as nerdamer.Expression;\r\n    } catch (error) {\r\n      this.expression = undefined;\r\n    }\r\n  }\r\n\r\n  private replaceInput(latex: string) {\r\n    dis2calc.forEach((v, k) => latex = latex.replace(k, v));\r\n    return latex;\r\n  }\r\n\r\n  private handleMatrix(latex: string) {\r\n    latex = this.replaceInput(latex);\r\n    let matrixList = latex.split(/\\\\\\\\|&/);\r\n    matrixList[0] = matrixList[0].slice(15);\r\n    matrixList[matrixList.length - 1] = matrixList[matrixList.length - 1].slice(0, matrixList[matrixList.length - 1].length - 13);\r\n    const n = Math.sqrt(matrixList.length);\r\n    const rows = Array.from(Array(n).keys());\r\n    let matrixExp = rows.map((v) => `[${matrixList.slice(v * n, (v + 1) * n).join()}]`).join();\r\n    return `matrix(${matrixExp})`;\r\n  }\r\n\r\n  @computed get eval() {\r\n    try {\r\n      return this.expression?.evaluate().text();\r\n    } catch (error) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  @computed get text() {\r\n    try {\r\n      // TODO: Implement only here, find a better way to implement to all method\r\n      let result = this.expression?.toTeX();\r\n      calc2dis.forEach((v, k) => result = result?.replace(k, v));\r\n      return result;\r\n    } catch (error) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  // TODO: Move this to input part\r\n  @computed get mode(): Mode {\r\n    try {\r\n      if (this.latex.search('int') >= 0) {\r\n        return Mode.Defint;\r\n      } else if (this.latex.search('limit') >= 0) {\r\n        return Mode.Limit;\r\n      } else if (this.latex.search('matrix') >= 0) {\r\n        return Mode.Matrix;\r\n      } else if (this.latex.search('x') >= 0) {\r\n        return Mode.Var;\r\n      } else {\r\n        return Mode.Eval;\r\n      }\r\n    } catch (error) {\r\n      return Mode.Eval;\r\n    }\r\n  }\r\n\r\n  @computed get solve() {\r\n    try {\r\n      return this.expression?.solveFor('x').toTeX();\r\n    } catch (error) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  @computed get integrate() {\r\n    if (this.expression === undefined) {\r\n      return undefined;\r\n    }\r\n    try {\r\n      // take undefined input will return undefined*x\r\n      return nerdamer.integrate(this.expression!, 'x').toTeX();\r\n    } catch (error) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  @computed get diff() {\r\n    if (this.expression === undefined) {\r\n      return undefined;\r\n    }\r\n    try {\r\n      return nerdamer.diff(this.expression!, 'x').toTeX();\r\n    } catch (error) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  @action\r\n  invertMatrix = () => {\r\n    try {\r\n      this.expression = nerdamerAll(`invert(${this.latex})`) as nerdamer.Expression;\r\n    } catch (error) {\r\n      this.expression = undefined;\r\n    }\r\n  }\r\n}\r\n\r\nexport const expStore = new Expression();\r\nexport const ExpContext = React.createContext<Expression>(expStore);\r\n\r\n// TODO: Need a better way to handle display and calc conversion\r\n// use regexp now\r\nconst dis2calc = new Map<RegExp, string>([\r\n  [RegExp(/\\s+/g), ''],\r\n  [RegExp('\\\\\\\\times', 'g'), '*'],\r\n  [RegExp('\\\\\\\\div', 'g'), '/'],\r\n  [RegExp('\\\\\\\\arcsin', 'g'), '\\\\asin'],\r\n  [RegExp('\\\\\\\\arccos', 'g'), '\\\\acos'],\r\n  [RegExp('\\\\\\\\arctan', 'g'), '\\\\atan'],\r\n  [RegExp('\\\\\\\\sqrt\\\\[\\\\]', 'g'), '\\\\sqrt'],\r\n]);\r\n\r\nconst calc2dis = new Map<RegExp, string>([\r\n  [RegExp('\\\\\\\\cdot', 'g'), '\\\\times'],\r\n]);\r\n\r\nautorun(() => {\r\n  window.variable.postMessage(expStore.mode.valueOf().toString());\r\n})\r\n","import { Mathfield } from 'mathlive/dist/public/mathfield'\r\n\r\nexport default class Controller {\r\n  private mfController!: Mathfield;\r\n\r\n  setController = (mf: Mathfield) => {\r\n    this.mfController = mf;\r\n    this.focus();\r\n  }\r\n\r\n  add = (expression: string) => this.mfController.insert(expression, { focus: true, format: \"latex\" });\r\n\r\n  backspace = () => {\r\n    this.mfController.executeCommand(\"deletePreviousChar\");\r\n    this.focus();\r\n  }\r\n\r\n  clear = () => {\r\n    this.mfController.executeCommand(\"deleteAll\");\r\n    this.focus();\r\n  }\r\n\r\n  private focus = () => {\r\n    if (this.mfController && this.mfController.focus) {\r\n      this.mfController.focus!();\r\n    }\r\n  }\r\n}","import React, { useContext } from \"react\";\r\nimport { ExpContext } from \"../models/expression\";\r\nimport Controller from '../models/controller';\r\nimport MathView from \"react-math-view\";\r\n\r\nexport default function MathBox() {\r\n  const exp = useContext(ExpContext);\r\n  const controller = new Controller();\r\n\r\n  return (\r\n    <MathView\r\n      virtualKeyboardMode='off'\r\n      onContentDidChange={(mf) => exp.update(mf.getValue(\"latex-expanded\"))}\r\n      style={{outline: 0, fontSize: '2em'}}\r\n      ref={(mfe) => {\r\n        if (mfe) {\r\n          controller.setController(mfe!);\r\n          window.add = controller.add;\r\n          window.backspace = controller.backspace;\r\n          window.clear = controller.clear;\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { ExpContext, Mode } from \"../models/expression\";\r\nimport MathView from 'react-math-view';\r\nimport Plot from \"./plot\";\r\n\r\nconst ResultBox = observer(() => {\r\n  const exp = useContext(ExpContext);\r\n\r\n  switch (exp.mode) {\r\n    case Mode.Eval:\r\n      return (<EvalResultBox />);\r\n    case Mode.Var:\r\n      return (<SymResultBox />);\r\n    case Mode.Matrix:\r\n      return (<MatrixResultBox />);\r\n    default:\r\n      return (<EvalResultBox />);\r\n  }\r\n});\r\n\r\nconst EvalResultBox = observer(() => {\r\n  const exp = useContext(ExpContext);\r\n  const evalResult = exp.eval;\r\n  const textResult = exp.text;\r\n\r\n  if (evalResult === undefined) {\r\n    return <div></div>;\r\n  }\r\n\r\n  if (evalResult === textResult) {\r\n    return (<InfoBox content={`=${evalResult}`} />);\r\n  }\r\n\r\n  return (<div>\r\n    <InfoBox content={`=${evalResult}`} />\r\n    <InfoBox content={`=${textResult}`} />\r\n  </div>);\r\n});\r\n\r\nconst MatrixResultBox = observer(() => {\r\n  const exp = useContext(ExpContext);\r\n\r\n  useEffect(() => window.invertMatrix = exp.invertMatrix);\r\n\r\n  if (exp.text === undefined) {\r\n    return <div></div>;\r\n  }\r\n\r\n  return (<InfoBox content={`=${exp.text}`} />);\r\n});\r\n\r\nenum SymMode {\r\n  Int,\r\n  Diff,\r\n  Simplify,\r\n  Plot,\r\n}\r\n\r\nconst SymResultBox = observer(() => {\r\n  const exp = useContext(ExpContext);\r\n  const [mode, setMode] = useState<SymMode>();\r\n\r\n  useEffect(() => {\r\n    window.doIntegrate = () => { setMode(SymMode.Int); }\r\n    window.doDiff = () => { setMode(SymMode.Diff); }\r\n    window.doPlot = () => { setMode(SymMode.Plot); }\r\n  }, []);\r\n\r\n  if (mode === SymMode.Int) {\r\n    return <InfoBox content={`=${exp.integrate}`} />;\r\n  }\r\n\r\n  if (mode === SymMode.Diff) {\r\n    return <InfoBox content={`=${exp.diff}`} />;\r\n  }\r\n\r\n  if (mode === SymMode.Plot) {\r\n    return <Plot />;\r\n  }\r\n\r\n  return (<div />);\r\n});\r\n\r\ninterface InfoBoxProp {\r\n  content: string,\r\n  hideAdd?: boolean,\r\n}\r\n\r\n// TODO: Auto hide button when content is empty\r\nfunction InfoBox(prop: InfoBoxProp) {\r\n  return (\r\n    <div style={{ display: 'flex' }}>\r\n      <MathView\r\n        value={prop.content}\r\n        readOnly={true}\r\n        style={{ outline: 0 }}\r\n      >\r\n      </MathView>\r\n      <button\r\n        hidden={prop.hideAdd}\r\n        style={{ height: '50%', marginLeft: '20pt' }}\r\n        onClick={() => {\r\n          window.clear();\r\n          window.add(prop.content.substr(1));\r\n        }}>\r\n        +</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResultBox;","import { useContext, useEffect, useRef } from 'react'\r\nimport functionPlot from 'function-plot';\r\nimport { ExpContext } from '../models/expression';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst Plot = observer(() => {\r\n  const fn = useContext(ExpContext);\r\n  const rootEl = useRef(null);\r\n  const options = {\r\n    target: \"\",\r\n    width: 800,\r\n    height: 500,\r\n    yAxis: { domain: [-1.2, 1.2] },\r\n    grid: true,\r\n    data: [{\r\n      fn: fn?.text,\r\n    }]\r\n  };\r\n\r\n  useEffect(() => {\r\n    try {\r\n      functionPlot(Object.assign({}, options, { target: rootEl.current }))\r\n    } catch (e) { }\r\n  })\r\n\r\n  return (<div ref={rootEl} />)\r\n})\r\n\r\nexport default Plot;","import React from 'react';\nimport MathBox from './components/MathBox';\nimport ResultBox from './components/ResultBox';\nimport { ExpContext, expStore } from './models/expression';\n\nexport default function App() {\n  return (\n    <ExpContext.Provider value={expStore}>\n      <MathBox />\n      <ResultBox />\n      <button onClick={() => window.add('\\\\left[\\\\begin{matrix} 2 & 3 \\\\\\\\ 4 & 7 \\\\end{matrix}\\\\right]')}>Test</button>\n    </ExpContext.Provider>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}