{"version":3,"sources":["models/expression.tsx","models/controller.tsx","components/MathBox.tsx","components/ResultBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Mode","nerdamerAll","require","expStore","latex","this","expression","evaluate","text","error","result","toTeX","calc2dis","forEach","v","k","replace","RegExp","search","Defint","Limit","Matrix","variables","length","Var","Eval","solveFor","toString","nerdamer","integrate","diff","observable","action","dis2calc","convertFromLaTeX","computed","ExpContext","React","createContext","Map","autorun","window","variable","postMessage","mode","valueOf","Controller","mfController","setController","mf","focus","add","insert","format","backspace","executeCommand","clear","MathBox","exp","useContext","controller","virtualKeyboardMode","onContentDidChange","update","getValue","style","outline","fontSize","ref","mfe","SymMode","ResultBox","observer","EvalResultBox","SymResultBox","evalResult","eval","InfoBox","content","useState","setMode","useEffect","doIntegrate","Int","doDiff","Diff","prop","value","readOnly","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yJAKYA,E,4GAFNC,EAAcC,EAAQ,K,SAEhBF,O,eAAAA,I,aAAAA,I,mBAAAA,I,iBAAAA,I,oBAAAA,M,SAuFCG,EAAW,I,mDA9EdC,MAAgB,G,yHAiBtB,IACE,OAAOC,KAAKC,WAAWC,WAAWC,OAClC,MAAOC,GACP,MAAO,W,2BAKT,IAEE,IAAIC,EAASL,KAAKC,WAAWK,QAE7B,OADAC,EAASC,SAAQ,SAACC,EAAGC,GAAJ,OAAUL,EAASA,EAAOM,QAAQ,IAAIC,OAAOF,EAAG,KAAMD,MAChEJ,EACP,MAAOD,GACP,MAAO,W,2BAKT,IACE,OAAIJ,KAAKD,MAAMc,OAAO,OAAS,EACtBlB,EAAKmB,OACHd,KAAKD,MAAMc,OAAO,SAAW,EAC/BlB,EAAKoB,MACHf,KAAKD,MAAMc,OAAO,UAAY,EAChClB,EAAKqB,OACoC,IAAvChB,KAAKC,WAAWgB,YAAYC,OAC9BvB,EAAKwB,IAELxB,EAAKyB,KAEd,MAAOhB,GACP,OAAOT,EAAKyB,Q,4BAKd,IACE,OAAOpB,KAAKC,WAAWoB,SAAS,KAAKC,WACrC,MAAOlB,GACP,MAAO,W,gCAKT,IACE,OAAOmB,IAASC,UAAUxB,KAAKC,WAAY,KAAKC,WAAWC,KAAK,aAChE,MAAOC,GACP,MAAO,W,2BAKT,IACE,OAAOmB,IAASE,KAAKzB,KAAKC,WAAY,KAAKC,WAAWC,KAAK,aAC3D,MAAOC,GACP,MAAO,a,6CAvEVsB,K,kGAGAC,K,oFACQ,SAAC5B,GACR,EAAKA,MAAQA,EACb6B,EAASpB,SAAQ,SAACC,EAAGC,GAAJ,OAAUX,EAAQA,EAAMY,QAAQ,IAAIC,OAAOF,EAAG,KAAMD,MACrE,IACE,EAAKR,WAAaL,EAAYiC,iBAAiB9B,GAC/C,MAAOK,GACP,EAAKH,WAAasB,IAAS,S,gCAI9BO,K,iGAQAA,K,iGAWAA,K,kGAkBAA,K,uGAQAA,K,sGAQAA,K,oEAUUC,EAAaC,IAAMC,cAA0BnC,GAIpD8B,EAAW,IAAIM,IAAoB,CACvC,CAAC,YAAa,OAGV3B,EAAW,IAAI2B,IAAoB,CACvC,CAAC,WAAY,aAGfC,aAAQ,WAENC,OAAOC,SAASC,YAAYxC,EAASyC,KAAKC,UAAUlB,e,ICzGjCmB,E,iDACXC,kB,OAERC,cAAgB,SAACC,GACf,EAAKF,aAAeE,EACpB,EAAKC,S,KAGPC,IAAM,SAAC7C,GAAD,OAAwB,EAAKyC,aAAaK,OAAO9C,EAAY,CAAE4C,OAAO,EAAMG,OAAQ,W,KAE1FC,UAAY,WACV,EAAKP,aAAaQ,eAAe,sBACjC,EAAKL,S,KAGPM,MAAQ,WACN,EAAKT,aAAaQ,eAAe,aACjC,EAAKL,S,KAGCA,MAAQ,WACV,EAAKH,cAAgB,EAAKA,aAAaG,OACzC,EAAKH,aAAaG,U,QCnBT,SAASO,IACtB,IAAMC,EAAMC,qBAAWvB,GACjBwB,EAAa,IAAId,EAEvB,OACE,cAAC,IAAD,CACEe,oBAAoB,MACpBC,mBAAoB,SAACb,GAAD,OAAQS,EAAIK,OAAOd,EAAGe,SAAS,oBACnDC,MAAO,CAACC,QAAS,EAAGC,SAAU,OAC9BC,IAAK,SAACC,GACAA,IACFT,EAAWZ,cAAcqB,GACzB5B,OAAOU,IAAMS,EAAWT,IACxBV,OAAOa,UAAYM,EAAWN,UAC9Bb,OAAOe,MAAQI,EAAWJ,U,ICc/Bc,E,eA5BCC,EAAYC,aAAS,WAGzB,OAFYb,qBAAWvB,GAEXQ,MACV,KAAK5C,EAAKyB,KACR,OAAQ,cAACgD,EAAD,IACV,KAAKzE,EAAKwB,IACR,OAAQ,cAACkD,EAAD,IACV,QACE,OAAQ,cAACD,EAAD,QAIRA,EAAgBD,aAAS,WAC7B,IAAMd,EAAMC,qBAAWvB,GACjBuC,EAAajB,EAAIkB,KAGvB,OAAID,IAFejB,EAAIlD,KAGb,cAACqE,EAAD,CAASC,QAAO,WAAMH,KAGxB,gCACN,cAACE,EAAD,CAASC,QAAO,WAAMpB,EAAIkB,QAC1B,cAACC,EAAD,CAASC,QAAO,WAAMpB,EAAIlD,e,SAIzB8D,O,aAAAA,I,eAAAA,I,uBAAAA,I,gBAAAA,M,KAOL,IAAMI,EAAeF,aAAS,WAC5B,IAAMd,EAAMC,qBAAWvB,GADW,EAEV2C,qBAFU,mBAE3BnC,EAF2B,KAErBoC,EAFqB,KASlC,OALAC,qBAAU,WACRxC,OAAOyC,YAAc,WAAQF,EAAQV,EAAQa,MAC7C1C,OAAO2C,OAAS,WAAQJ,EAAQV,EAAQe,SACvC,IAECzC,IAAS0B,EAAQa,IACZ,cAACN,EAAD,CAASC,QAAO,WAAMpB,EAAI7B,aAG/Be,IAAS0B,EAAQe,KACZ,cAACR,EAAD,CAASC,QAAO,WAAMpB,EAAI5B,QAG3B,2BAOV,SAAS+C,EAAQS,GACf,OAAQ,cAAC,IAAD,CACNC,MAAOD,EAAKR,QACZU,UAAU,EACVvB,MAAO,CAAEC,QAAS,EAAGC,SAAU,WAIpBI,QCnEA,SAASkB,IACtB,OACE,eAACrD,EAAWsD,SAAZ,CAAqBH,MAAOpF,EAA5B,UACE,cAACsD,EAAD,IACA,cAAC,EAAD,OCPN,IAYekC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACb,EAAD,MAEFc,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.018660b9.chunk.js","sourcesContent":["import { action, autorun, computed, observable } from \"mobx\";\r\nimport React from \"react\";\r\nimport nerdamer from 'nerdamer';\r\nconst nerdamerAll = require('nerdamer/all');\r\n\r\nexport enum Mode {\r\n  Eval = 0,\r\n  Var,\r\n  Defint,\r\n  Limit,\r\n  Matrix,\r\n};\r\n\r\nexport default class Expression {\r\n  private latex: string = '';\r\n\r\n  @observable\r\n  private expression!: nerdamer.Expression;\r\n\r\n  @action\r\n  update = (latex: string) => {\r\n    this.latex = latex;\r\n    dis2calc.forEach((v, k) => latex = latex.replace(new RegExp(k, 'g'), v));\r\n    try {\r\n      this.expression = nerdamerAll.convertFromLaTeX(latex) as nerdamer.Expression;\r\n    } catch (error) {\r\n      this.expression = nerdamer('');\r\n    }\r\n  }\r\n\r\n  @computed get eval(): string {\r\n    try {\r\n      return this.expression.evaluate().text();\r\n    } catch (error) {\r\n      return 'error';\r\n    }\r\n  }\r\n\r\n  @computed get text(): string {\r\n    try {\r\n      // TODO: Implement only here, find a better way to implement to all method\r\n      let result = this.expression.toTeX();\r\n      calc2dis.forEach((v, k) => result = result.replace(new RegExp(k, 'g'), v));\r\n      return result;\r\n    } catch (error) {\r\n      return 'error';\r\n    }\r\n  }\r\n\r\n  @computed get mode(): Mode {\r\n    try {\r\n      if (this.latex.search('int') > 0) {\r\n        return Mode.Defint;\r\n      } else if (this.latex.search('limit') > 0) {\r\n        return Mode.Limit;\r\n      } else if (this.latex.search('matrix') > 0) {\r\n        return Mode.Matrix;\r\n      } else if (this.expression.variables().length !== 0) {\r\n        return Mode.Var;\r\n      } else {\r\n        return Mode.Eval;\r\n      }\r\n    } catch (error) {\r\n      return Mode.Eval;\r\n    }\r\n  }\r\n\r\n  @computed get solve(): string {\r\n    try {\r\n      return this.expression.solveFor('x').toString();\r\n    } catch (error) {\r\n      return 'error';\r\n    }\r\n  }\r\n\r\n  @computed get integrate(): string {\r\n    try {\r\n      return nerdamer.integrate(this.expression, 'x').evaluate().text('fractions');\r\n    } catch (error) {\r\n      return 'error';\r\n    }\r\n  }\r\n\r\n  @computed get diff(): string {\r\n    try {\r\n      return nerdamer.diff(this.expression, 'x').evaluate().text('fractions');\r\n    } catch (error) {\r\n      return 'error';\r\n    }\r\n  }\r\n}\r\n\r\nexport const expStore = new Expression();\r\nexport const ExpContext = React.createContext<Expression>(expStore);\r\n\r\n// TODO: Need a better way to handle display and calc conversion\r\n// use regexp now\r\nconst dis2calc = new Map<string, string>([\r\n  ['\\\\\\\\times', '*'],\r\n]);\r\n\r\nconst calc2dis = new Map<string, string>([\r\n  ['\\\\\\\\cdot', '\\\\times'],\r\n]);\r\n\r\nautorun(() => {\r\n  // console.log(expStore.mode.valueOf().toString());\r\n  window.variable.postMessage(expStore.mode.valueOf().toString());\r\n})\r\n","import { Mathfield } from 'mathlive/dist/public/mathfield'\r\n\r\nexport default class Controller {\r\n  private mfController!: Mathfield;\r\n\r\n  setController = (mf: Mathfield) => {\r\n    this.mfController = mf;\r\n    this.focus();\r\n  }\r\n\r\n  add = (expression: string) => this.mfController.insert(expression, { focus: true, format: \"latex\" });\r\n\r\n  backspace = () => {\r\n    this.mfController.executeCommand(\"deletePreviousChar\");\r\n    this.focus();\r\n  }\r\n\r\n  clear = () => {\r\n    this.mfController.executeCommand(\"deleteAll\");\r\n    this.focus();\r\n  }\r\n\r\n  private focus = () => {\r\n    if (this.mfController && this.mfController.focus) {\r\n      this.mfController.focus!();\r\n    }\r\n  }\r\n}","import React, { useContext } from \"react\";\r\nimport { ExpContext } from \"../models/expression\";\r\nimport Controller from '../models/controller';\r\nimport MathView from \"react-math-view\";\r\n\r\nexport default function MathBox() {\r\n  const exp = useContext(ExpContext);\r\n  const controller = new Controller();\r\n\r\n  return (\r\n    <MathView\r\n      virtualKeyboardMode='off'\r\n      onContentDidChange={(mf) => exp.update(mf.getValue(\"latex-expanded\"))}\r\n      style={{outline: 0, fontSize: '2em'}}\r\n      ref={(mfe) => {\r\n        if (mfe) {\r\n          controller.setController(mfe!);\r\n          window.add = controller.add;\r\n          window.backspace = controller.backspace;\r\n          window.clear = controller.clear;\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { ExpContext, Mode } from \"../models/expression\";\r\nimport MathView from 'react-math-view';\r\n\r\nconst ResultBox = observer(() => {\r\n  const exp = useContext(ExpContext);\r\n\r\n  switch (exp.mode) {\r\n    case Mode.Eval:\r\n      return (<EvalResultBox />);\r\n    case Mode.Var:\r\n      return (<SymResultBox />);\r\n    default:\r\n      return (<EvalResultBox />);\r\n  }\r\n});\r\n\r\nconst EvalResultBox = observer(() => {\r\n  const exp = useContext(ExpContext);\r\n  const evalResult = exp.eval;\r\n  const textResult = exp.text;\r\n\r\n  if (evalResult === textResult) {\r\n    return (<InfoBox content={`=${evalResult}`} />);\r\n  }\r\n\r\n  return (<div>\r\n    <InfoBox content={`=${exp.eval}`} />\r\n    <InfoBox content={`=${exp.text}`} />\r\n  </div>);\r\n});\r\n\r\nenum SymMode {\r\n  Int,\r\n  Diff,\r\n  Simplify,\r\n  Plot,\r\n}\r\n\r\nconst SymResultBox = observer(() => {\r\n  const exp = useContext(ExpContext);\r\n  const [mode, setMode] = useState<SymMode>();\r\n\r\n  useEffect(() => {\r\n    window.doIntegrate = () => { setMode(SymMode.Int); }\r\n    window.doDiff = () => { setMode(SymMode.Diff); }\r\n  }, []);\r\n\r\n  if (mode === SymMode.Int) {\r\n    return <InfoBox content={`=${exp.integrate}`} />;\r\n  }\r\n\r\n  if (mode === SymMode.Diff) {\r\n    return <InfoBox content={`=${exp.diff}`} />;\r\n  }\r\n\r\n  return (<div />);\r\n});\r\n\r\ninterface InfoBoxProp {\r\n  content: string,\r\n}\r\n\r\nfunction InfoBox(prop: InfoBoxProp) {\r\n  return (<MathView\r\n    value={prop.content}\r\n    readOnly={true}\r\n    style={{ outline: 0, fontSize: '1.2em' }}\r\n  />);\r\n}\r\n\r\nexport default ResultBox;","import React from 'react';\nimport MathBox from './components/MathBox';\nimport ResultBox from './components/ResultBox';\nimport { ExpContext, expStore } from './models/expression';\n\nexport default function App() {\n  return (\n    <ExpContext.Provider value={expStore}>\n      <MathBox />\n      <ResultBox />\n    </ExpContext.Provider>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}