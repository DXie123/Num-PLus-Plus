{"version":3,"sources":["models/expression.tsx","models/controller.tsx","components/MathBox.tsx","components/ResultBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["nerdamerAll","require","expStore","this","expression","evaluate","text","error","variables","solveFor","toString","nerdamer","integrate","diff","observable","action","input","latex","convertFromLaTeX","computed","ExpContext","React","createContext","controller","mfController","setController","mf","focus","add","insert","format","backspace","executeCommand","clear","ControllerContext","MathBox","exp","useContext","virtualKeyboardMode","onContentDidChange","update","getValue","ref","mfe","InfoBox","prop","Container","title","value","content","readOnly","ResultBox","observer","console","log","List","eval","solve","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c588c0d4.chunk.js","sourcesContent":["import { action, computed, observable } from \"mobx\";\r\nimport React from \"react\";\r\nimport nerdamer from 'nerdamer';\r\nconst nerdamerAll = require('nerdamer/all');\r\n\r\nexport default class Expression {\r\n  @observable latex: string = '';\r\n\r\n  @observable\r\n  private expression!: nerdamer.Expression;\r\n\r\n  @action\r\n  update = (input: string) => {\r\n    this.latex = input;\r\n    try {\r\n      this.expression = nerdamerAll.convertFromLaTeX(input) as nerdamer.Expression;\r\n    } catch (error) {\r\n      this.expression = nerdamer('');\r\n    }\r\n  }\r\n\r\n  @computed get eval(): string {\r\n    try {\r\n      return this.expression.evaluate().text();\r\n    } catch (error) {\r\n      return 'error';\r\n    }\r\n  }\r\n\r\n  @computed get text(): string {\r\n    try {\r\n      return this.expression.evaluate().text('fractions');\r\n    } catch (error) {\r\n      return 'error';\r\n    }\r\n  }\r\n\r\n  @computed get variable(): string[] {\r\n    try {\r\n      return this.expression.variables();\r\n    } catch (error) {\r\n      return ['error'];\r\n    }\r\n  }\r\n\r\n  @computed get solve(): string {\r\n    try {\r\n      return this.expression.solveFor('x').toString();\r\n    } catch (error) {\r\n      return 'error';\r\n    }\r\n  }\r\n\r\n  @computed get integrate(): string {\r\n    try {\r\n      return nerdamer.integrate(this.expression, 'x').evaluate().text('fractions');\r\n    } catch (error) {\r\n      return 'error';\r\n    }\r\n  }\r\n\r\n  @computed get diff(): string {\r\n    try {\r\n      return nerdamer.diff(this.expression, 'x').evaluate().text('fractions');\r\n    } catch (error) {\r\n      return 'error';\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport const expStore = new Expression();\r\nexport const ExpContext = React.createContext<Expression>(expStore);","import { Mathfield } from 'mathlive/dist/public/mathfield'\r\nimport React from 'react';\r\n\r\nexport default class Controller {\r\n  private mfController!: Mathfield;\r\n\r\n  setController = (mf: Mathfield) => {\r\n    this.mfController = mf;\r\n    this.focus();\r\n  }\r\n\r\n  add = (expression: string) => this.mfController.insert(expression, { focus: true, format: \"latex\" });\r\n\r\n  backspace = () => {\r\n    this.mfController.executeCommand(\"deletePreviousChar\");\r\n    this.focus();\r\n  }\r\n\r\n  clear = () => {\r\n    this.mfController.executeCommand(\"deleteAll\");\r\n    this.focus();\r\n  }\r\n\r\n  private focus = () => {\r\n    if (this.mfController && this.mfController.focus) {\r\n      this.mfController.focus!();\r\n    }\r\n  }\r\n}\r\n\r\nexport const controller = new Controller();\r\nexport const ControllerContext = React.createContext<Controller>(controller);","import React, { useContext } from \"react\";\r\nimport { ExpContext } from \"../models/expression\";\r\nimport { ControllerContext } from '../models/controller';\r\nimport MathView from \"react-math-view\";\r\n\r\nexport default function MathBox() {\r\n  const exp = useContext(ExpContext);\r\n  const controller = useContext(ControllerContext);\r\n\r\n  return (\r\n    <MathView\r\n      virtualKeyboardMode='off'\r\n      onContentDidChange={(mf) => exp.update(mf.getValue(\"latex-expanded\"))}\r\n      ref={(mfe) => {\r\n        if (mfe) {\r\n          controller.setController(mfe!);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}","import { observer } from \"mobx-react\";\r\nimport React, { useContext } from \"react\";\r\nimport { ExpContext } from \"../models/expression\";\r\nimport MathView from 'react-math-view';\r\nimport { Container, List } from \"@material-ui/core\";\r\n\r\nconst ResultBox = observer(() => {\r\n  const exp = useContext(ExpContext);\r\n  console.log(exp.latex);\r\n\r\n  return (<List>\r\n    <InfoBox\r\n      title={'Eval'}\r\n      content={exp.eval}\r\n    />\r\n    <InfoBox\r\n      title={'Text'}\r\n      content={exp.text}\r\n    />\r\n    <InfoBox\r\n      title={'Roots'}\r\n      content={exp.solve}\r\n    />\r\n    <InfoBox\r\n      title={'Int'}\r\n      content={exp.integrate}\r\n    />\r\n    <InfoBox\r\n      title={'Diff'}\r\n      content={exp.diff}\r\n    />\r\n  </List>)\r\n});\r\n\r\ninterface InfoBoxProp {\r\n  title: string,\r\n  content: string,\r\n}\r\n\r\nfunction InfoBox(prop: InfoBoxProp) {\r\n  return (<Container>\r\n    <p>{prop.title}</p>\r\n    <MathView\r\n      value={prop.content}\r\n      readOnly={true}\r\n    />\r\n  </Container>);\r\n\r\n}\r\n\r\nexport default ResultBox;","import React from 'react';\nimport MathBox from './components/MathBox';\nimport ResultBox from './components/ResultBox';\nimport  { ControllerContext, controller } from './models/controller';\nimport { ExpContext, expStore } from './models/expression';\n\nexport default function App() {\n  return (\n    <ControllerContext.Provider value={controller}>\n      <ExpContext.Provider value={expStore}>\n        <MathBox />\n        <ResultBox />\n      </ExpContext.Provider>\n    </ControllerContext.Provider>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}